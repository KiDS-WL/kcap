[DEFAULT]
; this is the path to where the input files are kept
;input_path = /path/to/2pcfs/
input_path = ./
; path to the main folder where all the outputs will be written
;outputDirectory= /path/to/output/
outputDirectory = %(input_path)s/example_files/
; path to cosmosis-standard-library
;cosmosis_standrad_library_path=/path/to/cosmosis/standard/library/
cosmosis_standrad_library_path=../cosmosis-standard-library/

nz_lens_file_name=lens_flinc_nofz.fits ; input n(z)
nz_source_file_name=source_flinc_nofz.fits ; input n(z)
redshift_name_lens = lens_flinc
redshift_name_source = source_flinc

Apodise_BP = 1 ;use analytic solution for g

[runtime]
; The test sampler just runs a single parameter set
sampler = test

; The output section describes where to save the results of the sampling. Not all samplers use this facility - for example, the test and maxlike samplers produce only a single value and so do not need an output file. 
[output]
filename = %(outputDirectory)s/outputs/test_output.txt
format = text
verbosity= highest
; verbosity	Choose from "silent", "quiet", "gentle", "standard", "noisy", "debug", and "highest" to get different amounts of output. Not all the printing code uses this mechanism so we need to improve it.

[test]
save_dir=%(outputDirectory)s/outputs/
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
quiet = F
timing = T
debug = F
modules = consistency camb halofit_takahashi extrapolate fits_nz_source fits_nz_lens bias pk_to_cl bandpower_clustering bandpower_shear_e bandpower_shear_b bandpower_ggl
values = %(input_path)s/example_files/inputs/values.ini

likelihoods = 
extra_output = 


[consistency]
file = %(cosmosis_standrad_library_path)s/utility/consistency/consistency_interface.py


[camb]
file = %(cosmosis_standrad_library_path)s/boltzmann/camb/camb.so
mode=all
lmax=2500
;accuracy_boost = 2.0
;high_accuracy_default = T
feedback=0
kmin=1e-5
kmax=10.0
nk=200
zmax=6.0
zmin=0.0
;nz=2
background_zmax=6.0
background_zmin=0.0
background_nz=150


[halofit_takahashi]
file = %(cosmosis_standrad_library_path)s/boltzmann/halofit_takahashi/halofit_interface.so


[extrapolate]
file = %(cosmosis_standrad_library_path)s/boltzmann/extrapolate/extrapolate_power.py
kmax = 500.



[bias]
file = %(cosmosis_standrad_library_path)s/bias/constant_bias/constant_bias.py


[fits_nz_source]
file = %(cosmosis_standrad_library_path)s/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(input_path)s/example_files/%(nz_source_file_name)s
data_sets = %(redshift_name_source)s
prefix_section = T
prefix_extension = T


[fits_nz_lens]
file = %(cosmosis_standrad_library_path)s/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(input_path)s/example_files/%(nz_lens_file_name)s
data_sets = %(redshift_name_lens)s
prefix_section = T
prefix_extension = T

[pk_to_cl]
file = %(cosmosis_standrad_library_path)s/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 1.0e4
n_ell = 200
position-position = %(redshift_name_lens)s-%(redshift_name_lens)s 
position-shear = %(redshift_name_lens)s-%(redshift_name_source)s 
shear-shear = %(redshift_name_source)s-%(redshift_name_source)s 
intrinsic-intrinsic = F
shear-intrinsic = F
position-intrinsic = F
verbose = F
get_kernel_peaks = F


; check these ones
[cl2xi_shear]
file = %(cosmosis_standrad_library_path)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0


[cl2xi_ggl]
file = %(cosmosis_standrad_library_path)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 2

; There are differenet inputs you can give for this
[bandpower_clustering]
file = %(input_path)s/libbandpower.so
type = clustering ;choose between: clustering, ggl, cosmic_shear_e and cosmic_shear_b
Response_function_type = tophat ; default is tophat. Currently this is the only option
Analytic = 1 ;use analytic solution for g
output_section_name= bandpower_galaxy ; the DEFAULT is band_power
;input_section_name = shear_cl ; the DEFAULT is shear_cl
;l_min_max_file = l_min_max_file.ascii; a file with minimum and maximum values for ell. If it doesn't exist 
; will look for l_min, l_max and nBands then do log binning between l_min and l_max.
; if the file exists we will ignore l_min,l_max and nBands
l_min=100.0
l_max=1500.0
nBands=8

Apodise=%(Apodise_BP)s ; if zero no apodisation is applied. If not zero apply apodisation
Delta_x=0.5 ; apodisation length in arcmins

;The range of theta_min and theta_max to use for defining the filters. 
;These stay the same no matter if apodisation is used or not
theta_min=0.25 
theta_max=397.0 

; this is where the bandpower weight functions are saved
Output_FolderName = ./BandPower_outputs/


; There are differenet inputs you can give for this
[bandpower_ggl]
file = %(input_path)s/libbandpower.so
type = ggl
Response_function_type = tophat
Analytic = 1 ;use analytic solution for g
output_section_name= bandpower_galaxy_shear ; the DEFAULT is band_power
;input_section_name = galaxy_shear_cl ; the DEFAULT is galaxy_shear_cl
;l_min_max_file = l_min_max_file.ascii; a file with minimum and maximum values for ell. If it doesn't exist 
; will look for l_min, l_max and nBands then do log binning between l_min and l_max.
; if the file exists we will ignore l_min,l_max and nBands
l_min=100.0
l_max=1500.0
nBands=8

Apodise= %(Apodise_BP)s
Delta_x=0.5 ; apodisation length in arcmins

theta_min=0.25
theta_max=397.0

Output_FolderName = ./BandPower_outputs/


; There are differenet inputs you can give for this
[bandpower_shear_e]
file = %(input_path)s/libbandpower.so
type = cosmic_shear_e
Response_function_type = tophat
Analytic = 1 ;use analytic solution for g
output_section_name= bandpower_shear_e ; the DEFAULT is band_power
;input_section_name = shear_cl ; the DEFAULT is shear_cl
;l_min_max_file = l_min_max_file.ascii; a file with minimum and maximum values for ell. If it doesn't exist 
; will look for l_min, l_max and nBands then do log binning between l_min and l_max.
; if the file exists we will ignore l_min,l_max and nBands
l_min=100.0
l_max=1500.0
nBands=8

Apodise= %(Apodise_BP)s
Delta_x=0.5 ; apodisation length in arcmins

theta_min=0.25
theta_max=397.0

Output_FolderName = ./BandPower_outputs/



; There are differenet inputs you can give for this
[bandpower_shear_b]
file = %(input_path)s/libbandpower.so
type = cosmic_shear_b
Response_function_type = tophat
Analytic = 1 ;use analytic solution for g
output_section_name= bandpower_shear_b ; the DEFAULT is band_power
input_section_name = shear_cl ; the DEFAULT is shear_cl
;l_min_max_file = l_min_max_file.ascii; a file with minimum and maximum values for ell. If it doesn't exist 
; will look for l_min, l_max and nBands then do log binning between l_min and l_max.
; if the file exists we will ignore l_min,l_max and nBands
l_min=100.0
l_max=1500.0
nBands=8

Apodise= %(Apodise_BP)s
Delta_x=0.5 ; apodisation length in arcmins

theta_min=0.25
theta_max=397.0

Output_FolderName = ./BandPower_outputs/


