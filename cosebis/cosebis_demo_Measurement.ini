[runtime]
; The test sampler just runs a single parameter set
sampler = test


; The output section describes where to save the results of the sampling. Not all samplers use this facility 
;- for example, the test and maxlike samplers produce only a single value and so do not need an output file. 
[output]
filename = cosebis_SLICS.txt
format = text
verbosity= debug

; verbosity	Choose from "silent", "quiet", "gentle", "standard", "noisy", "debug", and "highest" to get different amounts of output. Not all the printing code uses this mechanism so we need to improve it.

[test]
save_dir=outputDirectory/COSEBIS_measurements/
fatal_errors=T

[pipeline]
; The list of modules to be run, in this order.
; Don't need camb halofit_takahashi extrapolate_power load_nz shear_shear if reading 2PCFs from file
modules = consistency camb halofit_takahashi extrapolate_power load_nz shear_shear cosebis_mocks

values = ${INPUT_DIR}/values.ini
;priors = cosmosis-standard-library/cosebis/prior.ini

likelihoods = 
extra_output = 

; We can get a little more output during the run by setting some values
quiet=F
timing=T
debug=T

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=1000
feedback=0

[halofit_takahashi]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

[extrapolate_power]
file=cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

[load_nz]
file = cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
nz_file = ${INPUT_DIR}/nofZ.fits
data_sets=SAMPLE


[shear_shear]
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 10000.0
n_ell = 100
shear-shear = sample-sample 
verbose = T

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[cosebis_mocks]
; this one calculates COSEBIs from 2PCFs either from an input or from earlier calculations
; also need to add 2pt if calculating from Nicaea results
file = ${SOURCE_DIR}/libcosebis_2pcfs.so
input_2pcfs_filename = ${INPUT_DIR}/xi_LOS
input_2pcfs_filename_start=1
input_2pcfs_filename_end=1000
theta_min = 0.5
theta_max = 100.0
noisy_input= 1
n_max = 20
n_zbins = 1
number_of_columns_in_input_files=7 ;the first three columns: theta xi_+ xi_- are important. The rest could be anything.
CalculateCov = 1
CovNameSuffix= "noNoise"


[cosebis_data]
; this one calculates COSEBIs from 2PCFs either from an input or from earlier calculations
; also need to add 2pt if calculating from Nicaea results
file = ${SOURCE_DIR}/libcosebis_2pcfs.so
input_2pcfs_filename = ${INPUT_DIR}/xi_
theta_min = 0.5
theta_max = 100.0
noisy_input= 1
n_max = 20
n_zbins = 4
number_of_columns_in_input_files=7 ;the first three columns: theta xi_+ xi_- are important. The rest could be anything.
CalculateCov = 0
CovNameSuffix= ""
CovarianceFolderName= FolderAddressForCovariance
