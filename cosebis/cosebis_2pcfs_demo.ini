[DEFAULT]
; this is the path to where the input files are kept
;input_path = /path/to/2pcfs/
input_path = /Users/marika_asgary/Documents/CosmicShear/repos/cosebis_cosmosis/
; path to the main folder where all the outputs will be written
;outputDirectory= /path/to/output/
outputDirectory = %(input_path)s/example_files/outputs/
; path to cosmosis-standard-library
;cosmosis_standrad_library_path=/path/to/cosmosis/standard/library/
cosmosis_standrad_library_path=/Users/marika_asgary/Documents/CosmicShear/repos/kcap/cosmosis-standard-library/

inputCovName=%(input_path)s/example_files/covariance.ascii ; input covariance for calculating the likelihood
input2PCFsName=%(input_path)s/example_files/xipm_data.ascii; input 2PCFs from data
nz_file_name=nofz.fits ; input n(z)
redshift_name = flinc

[runtime]
; The test sampler just runs a single parameter set
sampler = test

; The output section describes where to save the results of the sampling. Not all samplers use this facility - for example, the test and maxlike samplers produce only a single value and so do not need an output file. 
[output]
filename = %(outputDirectory)s/outputs/test_output.txt
format = text
verbosity= highest
; verbosity	Choose from "silent", "quiet", "gentle", "standard", "noisy", "debug", and "highest" to get different amounts of output. Not all the printing code uses this mechanism so we need to improve it.

; The total number of samples taken is walkers*samples.
; Running a sampler in parallel
; To run a sampler in parallel you must have mpi4py installed
; this means you must also have an MPI environment including mpicc and mpif90 (the automatic installation includes all these).
; For all the samplers, you can run in parallel on, e.g. four samplers, like this:
; mpirun -n 4 cosmosis --mpi params.ini
; Maximum process numbers
; For emcee, the most MPI processes you can use without having some idle is nwalkers/2+1.

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
;The total number of samples taken is walkers*samples.
walkers = 48
samples = 1500
; This is the interval at which convergence diagnostics
; are performed
nsteps = 100
;start_points=cosmosis-standard-library/cosebis/values.ini


[test]
save_dir=%(outputDirectory)s/outputs/
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
quiet = T
timing = F
debug = F
modules = consistency camb halofit_takahashi extrapolate fits_nz pk_to_cl cl2xi cosebis
values = %(input_path)s/example_files/values_likelihood.ini


likelihoods = 
extra_output = 


[consistency]
file = %(cosmosis_standrad_library_path)s/utility/consistency/consistency_interface.py


[camb]
file = %(cosmosis_standrad_library_path)s/boltzmann/camb/camb.so
mode=all
lmax=2500
;accuracy_boost = 2.0
;high_accuracy_default = T
feedback=0
kmin=1e-5
kmax=10.0
nk=200
zmax=6.0
zmin=0.0
;nz=2
background_zmax=6.0
background_zmin=0.0
background_nz=150


[halofit_takahashi]
file = %(cosmosis_standrad_library_path)s/boltzmann/halofit_takahashi/halofit_interface.so


[extrapolate]
file = %(cosmosis_standrad_library_path)s/boltzmann/extrapolate/extrapolate_power.py
kmax = 500.


[fits_nz]
file = %(cosmosis_standrad_library_path)s/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(input_path)s/example_files/%(nz_file_name)s
data_sets = %(redshift_name)s
prefix_section = T
prefix_extension = T

[pk_to_cl]
file = %(cosmosis_standrad_library_path)s/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5.0e5
n_ell = 400
position-shear = F
shear-shear = %(redshift_name)s-%(redshift_name)s 
position-position = F
intrinsic-intrinsic = F
shear-intrinsic = F
position-intrinsic = F
verbose = F
get_kernel_peaks = F


[cl2xi]
file = %(cosmosis_standrad_library_path)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0


[cosebis_mocks]
; this one calculates COSEBIs from 2PCFs either from an input or from earlier calculations
; also need to add 2pt if calculating from Nicaea results
file = ${SOURCE_DIR}/libcosebis_2pcfs.so
output_section_name = cosebis; default is cosebis
theta_min = 0.5 ; default is 1.
theta_max = 100.0 ;default is 100.
n_max = 10 ; default is 10
OutputFolderName = .;default is .
CalculateCov = 1 ;if one calculates covariance if zero it doesn't. 
;Only works if the input is a series of files from simulations for example

;expects this fomating for the input file names
;xipm_c1_c2_1+string("_nBins_")+toString(config->nZBins)
;	+string("_Bin")+toString(i_bin)+string("_Bin")+toString(j_bin)+string(".ascii");
; // read in xi_pm files with Athena format. These are files created using a constant c1 and c2 catalouge with the
; // same positions as the catalouge to be analysed. 
; // Simply swap the epsilon_1 and epsilon_2 in your input cats with c1 and c2 respectively. 
; // Do this for two sets of c1 and c2 so that the code can calculate sum (cos 4phi) and sum (sin 4phi) from the xi_mimus
; // component. This is used for the constant c-term modelling which affects xi_minus given 
; // a finite number of galaxies and  a finite field. 
; // The important part is that the first three columns are
; // theta xi_plus xi_minus
xipm_c1_c2_1 = ; to model c-term
xipm_c1_c2_2 = ; to model c-term
c1_1= ; need to know what c1, c2 for file 1 and file 2 are
c2_1= ;
c1_2= ;
c2_2= ;
input_section_name_plus= shear_xi_plus ; default is shear_xi_plus
input_section_name_minus= shear_xi_minus ; default is shear_xi_minus

n_zbins = 1 ; number of redshift bins, 
;if set to zero or smaller assumes no binning name is set and just uses the input_2pcfs_filename
;if a range of number for the start and end are given then uses input_2pcfs_filename+number
; if larger than zero then assumes file names are in this format:
;Input2PCFsFileName+toString(number)
;   +string("_nBins_")+toString(n_zbins)
;   +string("_Bin")+toString(i_bin)+string("_Bin")+toString(j_bin)+input_2pcfs_suffix;

noisy_input= 1 ; if set to one uses a trapezoidal integration and attempts to read input files
input_2pcfs_filename = ${INPUT_DIR}/xi_LOS
input_2pcfs_suffix =  ;name suffix goes at the end of the naming of the file, 
;also used for input_2pcfs_correction_filename
input_2pcfs_correction_filename = ; this is the 1+K(theta) correction in Miller et al. 2013, 
; if there is no m correction per galaxy to make this file then leave it.
m_bias_values = ; you can instead given m-bias values per redshift bin
input_2pcfs_filename_start=1 ; the starting LOS number
input_2pcfs_filename_end=1000 ; the ending LOS number 

NameSuffix= ; a suffix given to the output files. for example:
;En=OutputFolderName+"En"+Namesuffix+"_LOS"
; +toString(isim)+string("_nBins_")+toString(n_zbins)+"_"+thetaRange;





number_of_columns_in_input_files=7 ;the first three columns: theta xi_+ xi_- are important. The rest could be anything.
CalculateCov = 1
CovNameSuffix= "noNoise"


[cosebis_data]
; this one calculates COSEBIs from 2PCFs either from an input or from earlier calculations
; also need to add 2pt if calculating from Nicaea results
file = ${SOURCE_DIR}/libcosebis_2pcfs.so
input_2pcfs_filename = ${INPUT_DIR}/xi_
theta_min = 0.5
theta_max = 100.0
noisy_input= 1
n_max = 20
n_zbins = 4
number_of_columns_in_input_files=7 ;the first three columns: theta xi_+ xi_- are important. The rest could be anything.
CalculateCov = 0
CovNameSuffix= ""
CovarianceFolderName= FolderAddressForCovariance

[cosebis_theory_2pcfs]

