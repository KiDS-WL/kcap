[DEFAULT]
KCAP_PATH = .
RUN_NAME = dypolychord_gaussian_5d

[runtime]
sampler = dypolychord

[multinest]
;wrapped_params = cosmological_parameters--omega_b   cosmological_parameters--h0
max_iterations=100000
multinest_outfile_root=examples/output_test/multinest/multinest_%(RUN_NAME)s_
resume=F
; from Joe:- For a quick run:
;live_points=250
;efficiency=0.8
;tolerance=0.1
;constant_efficiency=F
;    ~ 140k evaluations
;    ~ 9k independent samples
;    Few enough samples that the plots will be too scrappy to use in publications. 
;    Estimated mean and covmat will still be good to a few percent
;    Evidence will be a bit off compared to other estimates.
;- Suggested standard run:
;live_points=500
;efficiency=0.3
;tolerance=0.1
;constant_efficiency=F
;    ~ 350k evaluations
;    ~ 20k independent samples
;    Plots should be fine with some small smoothing or Schuhman's transformation.
;    Reasonable evidence
;- A mega-run:
;live_points=1000
;efficiency=0.05
;tolerance=0.1   
;constant_efficiency=T
;    ~ 1M evaluations
;    ~ 40k independent samples
;    Switching on constant_efficiency speeds up from ~1M samples to ~600k
;    Should only need one or two of these for comparison.

;KV450 fiducial set up
live_points=1000
efficiency=0.3
tolerance=0.5
constant_efficiency=F
ins=F

[polychord]
max_iterations=100000
base_dir=./examples/output_test/polychord
polychord_outfile_root=polychord_%(RUN_NAME)s_
resume=F
live_points=50
tolerance=0.1
;repeats=0
;fast_fraction=0.5

[dypolychord]
do_dynamic_nested_sampling=F
base_dir=./examples/output_test/dypolychord
file_root=polychord_%(RUN_NAME)s_
live_points=50
nlive_const=30
ninit=5
precision_criterion=0.5
# Optimise for posterior estimation
dynamic_goal=1.0
feedback=3

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; ; of live points.  Sampling is done along lines that connect
; ; pairs of walkers.  The number of walkers must be at least
; ; 2*nparam + 1, but in general more than that usually works
; ; better.
burn=0.3
walkers = 32
; ; This many samples is overkill, just to make the plots
; ; look a lot nicer
samples = 10000
;;1000000
; ; This is the interval at which convergence diagnostics
; ; are performed
nsteps = 1
;

[test]
save_dir=examples/output_test/%(RUN_NAME)s
fatal_errors=T

[output]
filename=examples/output_test/%(RUN_NAME)s.txt
format=text

[pipeline]
modules = slow_module likelihood

values = examples/test_values.ini
priors = examples/test_priors.ini

likelihoods = gaussian
extra_output = 
quiet=T
timing=F
debug=F

fast_slow=F

[slow_module]
file = %(KCAP_PATH)s/modules/test_module.py
n_dim_slow = 1
parameter_section = parameters


[likelihood]
file = %(KCAP_PATH)s/modules/test_likelihoods.py
likelihood_type = gaussian
likelihood_name = gaussian
parameter_section = parameters
n_dim = 3
