[runtime]
; The test sampler just runs a single parameter set
;sampler = test
sampler = test



[test]
save_dir = /your/path/

; Samples --------------------------------------------------------------
; Specify anything relating to the surveys or galaxy samples that we want to stay fixed


[DEFAULT]
nz_def = 6
zmin_def =  0.2
zmax_def = 1.2
nmass_def = 200
logmassmin_def = 9.0
logmassmax_def = 16.0


; ============================================================================================================================================================== ;
[pipeline]
; ============================================================================================================================================================== ;

modules = consistency luminosity_scaling luminosity_scaling_redsats luminosity_scaling_bluesats camb halofit extrapolate hmf_and_halo_bias hod_red hod_blue nfw_halo satellite_alignment_red satellite_alignment_blue pk_red pk_blue add_red_and_blue_power ;pk_to_cl add_intrinsic 2pt_nicea 


; ============================================================================================================================================================== ;


;shortcut = camb

; The file to get cosmological and nuisance parameters
; from.


; initial parameter values and their ranges and priors
values = ../ia_halo_model/dev/cacciato2013_values_fiducial_h07.ini


; Not used here, becuase we are not sampling
likelihoods = 
extra_output = 
quiet=F
debug=T
timing=F

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

; A module!  Camb, set to a mode where it does
; background evolution, CMB, and matter power
; for the growth factor, zmin=0.

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=5000
feedback=0
zmin= 0.


;Halofit non-linear power
[halofit]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so
kmin=1e-5
kmax=500.0
nk=1000


[extrapolate]
file = cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py 
kmax = 1e8
nmax = 2580


[hmf_and_halo_bias]
file = ../ia_halo_model/dev/hmf_and_hbf_tinker.py
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz= %(nz_def)s 
do_halo_bias = True


; --------------------------------------------------------------------------------------------------------- ;

;HOD

[hod_red]
file = ../ia_halo_model/dev/hod_interface_v2.py
; if luminosities_z = True, then the luminosities are read from the luminosities_file [z_mid, lum_min(z), lum_max(z)]
luminosities_z = True
luminosities_file = /your/path/to/file.txt
nlum = 200
; -
; lum_min, lum_max, zmin, zmax and nz are only needed if luminosities_z = False
; -
;lum_min = 4.698941e+08
;lum_max = 1.180321e+11
;zmin = %(zmin_def)s
;zmax = %(zmax_def)s
;nz = %(nz_def)s 
abs_mag_sun = 4.68
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
z_median = 0.4
do_hod = True
do_number_density = True
do_galaxy_linear_bias = True
do_luminosity_function = False
; options are: "lf_z" or "lf_zmed" depending if you want to calculate the LF per each redshift or on the median one
lf_mode = "lf_z"
do_clf_quantities = False
name = red

[hod_blue]
file = ../ia_halo_model/dev/hod_interface_v2.py
; if luminosities_z = True, then the luminosities are read from the luminosities_file [z_mid, lum_min(z), lum_max(z)]
luminosities_z = True
luminosities_file = /your/path/to/file.txt
nlum = 200
; -
; lum_min, lum_max, zmin, zmax and nz are only needed if luminosities_z = False
; -
;lum_min = 4.698941e+08
;lum_max = 1.180321e+11
;zmin = %(zmin_def)s
;zmax = %(zmax_def)s
;nz = %(nz_def)s 
abs_mag_sun = 4.68
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
z_median = 0.4
do_hod = True
do_number_density = True
do_galaxy_linear_bias = True
do_luminosity_function = False
; options are: "lf_z" or "lf_zmed" depending if you want to calculate the LF per each redshift or on the median one
lf_mode = "lf_z"
do_clf_quantities = False
name = blue

; --------------------------------------------------------------------------------------------------------- ;

; Concentration-mass relation, virial radius and normalised Fourier transform of the NFW profile
[nfw_halo]
file = ../ia_halo_model_tests/dev/nfw_halo.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = 20
nmass_fast = 

; --------------------------------------------------------------------------------------------------------- ;


[satellite_alignment_red]
file = ../ia_halo_model/dev/wkm_interp_interface.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
kmin = 0.1
kmax = 10000.
nk = 1000
name=red

[satellite_alignment_blue]
file = ../ia_halo_model/dev/wkm_interp_interface.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
kmin = 0.1
kmax = 10000.
nk = 1000
name=blue


; --------------------------------------------------------------------------------------------------------- ;


[luminosity_scaling]
file= ../ia_halo_model/hod_and_lf/l_beta_mean_from_pdf.py
path_to_lum_file = /your/path/to/red_cen_lum_pdf.txt ; nz+1 columns : lum lum_pdf_zbin1 lum_pdf_zbin2 ... lum_pdf_zbin_nz
galaxy_type = centrals

[luminosity_scaling_redsats]
file= ../ia_halo_model/hod_and_lf/l_beta_mean_from_pdf.py
path_to_lum_file = /your/path/to/red_sat_lum_pdf.txt 
galaxy_type = satellites
name = red

[luminosity_scaling_bluesats]
file= ../ia_halo_model/hod_and_lf/l_beta_mean_from_pdf.py
path_to_lum_file = /your/path/to/blue_sat_lum_pdf.txt
galaxy_type = satellites
name = blue

; --------------------------------------------------------------------------------------------------------- ;


[pk_red]
file= ../ia_halo_model/dev/pk_interface.py
;log-spaced mass in units of M_sun/h
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
pipeline = False
p_GG = False
p_nn = False
p_xgG = False
p_gI = False
p_xGI = True
p_II = True
two_halo_only = False
hod_section_name = hod_red
f_red_cen = False
;if True:
;f_red_cen_file = /your/path/to/f_red_cen.txt ; #z_mid f_red_cen(z)
ia_luminosity_dependence_centrals = True
ia_luminosity_dependence_satellites = True
name = red

[pk_blue]
file= ../ia_halo_model/dev/pk_interface.py
;log-spaced mass in units of M_sun/h
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
pipeline = False
p_GG = False
p_nn = False
p_xgG = False
p_gI = False
p_xGI = True
p_II = True
two_halo_only = False
hod_section_name = hod_blue
f_red_cen = False
ia_luminosity_dependence_centrals = False
ia_luminosity_dependence_satellites = True
name = blue

[add_red_and_blue_power]
file = ../ia_halo_model/pk_full/add_red_and_blue_power_spectra.py
f_red_file = /your/path/to/f_red.txt ; two columns: z f_red(z)
do_p_nn = False
do_p_xgG = False
do_p_gI = False
do_p_xGI = True
do_p_II = True
zmax = 4.0 ; this extrapolates to high redshifts 

; --------------------------------------------------------------------------------------------------------- ;

