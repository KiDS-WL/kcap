[DEFAULT]
; this is the path to where the input files are kept
;input_path = /path/to/2pcfs/
cosebis_path =  /Users/marika_asgary/Documents/CosmicShear/repos/cosebis_cosmosis/
input_path = /Users/marika_asgary/Documents/CosmicShear/repos/cosebis_cosmosis/
in_out_Directory =  %(cosebis_path)s/example_files/xipm/
; path to the main folder where all the outputs will be written
;outputDirectory= /path/to/output/
outputDirectory = %(input_path)s/example_files/outputs/
; path to cosmosis-standard-library
;cosmosis_standrad_library_path=/path/to/cosmosis/standard/library/
cosmosis_standrad_library_path=/Users/marika_asgary/Documents/CosmicShear/repos/kcap/cosmosis-standard-library/


nz_file_name = nofZ_KV450_5bins.fits ; input n(z)
redshift_name = KV450


[runtime]
; The test sampler just runs a single parameter set
sampler = test

; The output section describes where to save the results of the sampling. Not all samplers use this facility - for example, the test and maxlike samplers produce only a single value and so do not need an output file. 
[output]
filename = %(outputDirectory)s/outputs/test_output.txt
format = text
verbosity= highest
; verbosity	Choose from "silent", "quiet", "gentle", "standard", 
; "noisy", "debug", and "highest" to get different amounts of output. 
; Not all the printing code uses this mechanism so we need to improve it.

[test]
save_dir=%(outputDirectory)s/
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
quiet = T
timing = T
debug = T
modules = consistency camb halofit_takahashi extrapolate fits_nz pk_to_cl cl2xi xip xim
values = %(input_path)s/example_files/inputs/values.ini
priors = %(input_path)s/example_files/inputs/priors.ini


likelihoods = 
extra_output = 


[consistency]
file = %(cosmosis_standrad_library_path)s/utility/consistency/consistency_interface.py


[camb]
file = %(cosmosis_standrad_library_path)s/boltzmann/camb/camb.so
mode=all
lmax=2500
;accuracy_boost = 2.0
;high_accuracy_default = T
feedback=0
kmin=1e-5
kmax=10.0
nk=200
zmax=6.0
zmin=0.0
;nz=2
background_zmax=6.0
background_zmin=0.0
background_nz=150


[halofit_takahashi]
file = %(cosmosis_standrad_library_path)s/boltzmann/halofit_takahashi/halofit_interface.so


[extrapolate]
file = %(cosmosis_standrad_library_path)s/boltzmann/extrapolate/extrapolate_power.py
kmax = 500.


[fits_nz]
file = %(cosmosis_standrad_library_path)s/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(input_path)s/example_files/%(nz_file_name)s
data_sets = %(redshift_name)s
prefix_section = T
prefix_extension = T

[pk_to_cl]
file = %(cosmosis_standrad_library_path)s/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5.0e5
n_ell = 400
position-shear = F
shear-shear = %(redshift_name)s-%(redshift_name)s 
position-position = F
intrinsic-intrinsic = F
shear-intrinsic = F
position-intrinsic = F
verbose = F
get_kernel_peaks = F


[cl2xi]
file = %(cosmosis_standrad_library_path)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0


[xip]
file = %(input_path)s/libxipm_binned.so
output_section_name= xi_binned_plus ; (optional) the DEFAULT is xi_binned_plus
input_section_name= shear_xi_plus ; (optional) the DEFAULT depends on type
type=plus ; please specify this otherwise as plus or minus DEFAULT is plus


; you have to give at least one of these options otherwise it will use the default values.
; will look for theta_min, theta_max and nTheta then do log binning between min and max.
; if the file exists we will ignore, theta_list, theta_min,theta_max and nTheta
; if theta_list exists will ignore theta_min,theta_max and nTheta
;theta_file_name = theta_file.ascii ; (optional) a file containing a list of theta values, one for each theta bin, if not given will look for theta_list
;theta_list = 0.7 1.2 ; (optional) a list theta values one for each theta bin. If not provided it will look for theta_min theta_max and nTheta
theta_min=0.5
theta_max=300.0
nTheta=9

weighted_binning = 1 ; set to zero for no binning
; if these files are given then we will ignore the theta values above
;theta_min_max_filename = theta_bin_edges_file.ascii ; (optional) these are the edges of the theta plus bins,

; only read if the theta_min_max_filename is given
; if InputNpair not given weighted binning is set to theta*delta_theta
; The files should be name like so: ${InputNpair}_nBins_${nBins}_Bin${i}_Bin${j}${InputNpair_suffix}
;InputNpair = InputNpair; (optional) a file containing the number of npair per finely binned thetas.
;InputNpair_suffix = .ascii ; (optional) DEFAULT is empty
Column_theta = 0 ; (optional) which column in the file is theta? DEFAULT is 0
Column_Npair = 7 ; which column in the file is npair? DEFAULT is 7
nBins_in = 5 ; number of redshift bins, this needs to be given, otherwise will set weighted binning to just theta

; Here we assume that the ordering of the data vector is:
; ///The data vector format should be:
; // \xi_+^{11}(\theta_1)
; // \xi_+^{11}(\theta_2)
; // ...
; // \xi_+^{11}(\theta_max)
; // \xi_+^{nn}(\theta_1)
; // ...
; // \xi_+^{nn}(\theta_max)
; // \xi_-^{11}(\theta_1)
; // \xi_-^{11}(\theta_2)
; // ...
; // \xi_-^{11}(\theta_max)
; // ...
; // \xi_-^{nn}(\theta_1)
; // ...
; // \xi_-^{nn}(\theta_max)

add_2D_cterm = 0 ; (optional) DEFAULT is 0: don't add it
InputXipm_2D_cterm = xip_2D_cterm.ascii; (optional) if not given and add_2D_cterm>0 then look in the block

add_c_term = 0 ; (optional) DEFAULT is 0: don't add it



[xim]
file = %(input_path)s/libxipm_binned.so
output_section_name= xi_binned_minus ; (optional) the DEFAULT is xi_binned_minus
type=minus ; please specify this otherwise as plus or minus DEFAULT is plus
input_section_name= shear_xi_minus ; (optional) the DEFAULT depends on type

; you have to give at least one of these options otherwise it will use the default values.
; will look for theta_min, theta_max and nTheta then do log binning between min and max.
; if the file exists we will ignore, theta_list, theta_min,theta_max and nTheta
; if theta_list exists will ignore theta_min,theta_max and nTheta
theta_file_name = theta_file.ascii ; (optional) a file containing a list of theta values, one for each theta bin, if not given will look for theta_list
theta_list = 0.7 1.2 ; (optional) a list theta values one for each theta bin. If not provided it will look for theta_min theta_max and nTheta
theta_min=0.5
theta_max=300.0
nTheta=9

weighted_binning = 1 ; set to zero for no binning
; Will check if the number of rows in this file matches nTheta
theta_min_max_filename = theta_bin_edges_file.ascii ; (optional) these are the edges of the theta plus bins,

; only read if the theta_min_max_filename is given
; if InputNpair not given weighted binning is set to theta*delta_theta
; The files should be name like so: ${InputNpair}_nBins_${nBins}_Bin${i}_Bin${j}${InputNpair_suffix}
InputNpair = InputNpair; (optional) a file containing the number of npair per finely binned thetas.
InputNpair_suffix = .ascii ; (optional) DEFAULT is empty
Column_theta = 1 ; (optional) which column in the file is theta? DEFAULT is 1
Column_Npair = 8 ; which column in the file is npair? DEFAULT is 8, for treecor use 11
nBins_in = 5 ; number of redshift bins, this needs to be given, otherwise will set weighted binning to just theta

; Here we assume that the ordering of the data vector is:
; ///The data vector format should be:
; // \xi_+^{11}(\theta_1)
; // \xi_+^{11}(\theta_2)
; // ...
; // \xi_+^{11}(\theta_max)
; // \xi_+^{nn}(\theta_1)
; // ...
; // \xi_+^{nn}(\theta_max)
; // \xi_-^{11}(\theta_1)
; // \xi_-^{11}(\theta_2)
; // ...
; // \xi_-^{11}(\theta_max)
; // ...
; // \xi_-^{nn}(\theta_1)
; // ...
; // \xi_-^{nn}(\theta_max)

add_2D_cterm = 0 ; (optional) DEFAULT is 0: don't add it
InputXipm_2D_cterm = xim_2D_cterm.ascii; (optional) if not given and add_2D_cterm>0 then look in the block
input_2D_section_name = xi_2D ; (optional) where to look in the block for xi_2D, it has to be the same format as other cosmosis outputs
; the full value of this depends on type: input_2D_section_name+= "_"+type

add_c_term = 0 ; (optional) DEFAULT is 0: don't add it
InputCos4phi = InputCos4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
InputSin4phi = InputSin4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
; section names for sin and cos 4 phi in the block. The data has to be the same format as all other cosmosis outputs
input_sin4phi_section_name = xim_sin4phi ; (optional) only relevant for xim DEFAULT value is xim_sin4phi, will look in tis section for the xim_sin4phi values
input_cos4phi_section_name = xim_cos4phi ; (optional) only relevant for xim DEFAULT value is xim_cos4phi, will look in tis section for the xim_cos4phi values
