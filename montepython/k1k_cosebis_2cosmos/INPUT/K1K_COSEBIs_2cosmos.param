#------Experiments to test (separated with commas)-----

data.experiments=['K1K_COSEBIs_2cosmos']

#------ Settings for the over-sampling. The first element will always be set to
# 1, for it is the sampling of the cosmological parameters. The other numbers
# describe the over sampling of the nuisance parameter space. This array must
# have the same dimension as the number of blocks in your run (so, 1 for
# cosmological parameters, and then 1 for each experiment with varying nuisance
# parameters).
#data.over_sampling=[1, 1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo' or 'nuisance'

# Cosmological parameters list
# main parameters to extract:

data.parameters['omega_cdm_1']    = [0.11919,   0.01, 0.99, 0.0027,    1, 'cosmo1']
data.parameters['ln10^{10}A_s_1'] = [3.0753,   1.7, 5., 0.0029,    1, 'cosmo1']
data.parameters['omega_b_1']      = [0.022253,  0.01875, 0.02625, 0.028,  1, 'cosmo1']
data.parameters['n_s_1']          = [0.96229,   0.7, 1.3, 0.0074,    1, 'cosmo1']
data.parameters['h_1']         	  = [0.673,     0.64,   0.82,   0.0065, 1, 'cosmo1']
data.parameters['omega_cdm_2']    = [0.11919,   0.01, 0.99, 0.0027,    1, 'cosmo2']
data.parameters['ln10^{10}A_s_2'] = [3.0753,   1.7, 5., 0.0029,    1, 'cosmo2']
data.parameters['omega_b_2']      = [0.022253,  0.01875, 0.02625, 0.028,  1, 'cosmo2']
data.parameters['n_s_2']          = [0.96229,   0.7, 1.3, 0.0074,    1, 'cosmo2']
data.parameters['h_2']         	= [0.673,     0.64,   0.82,   0.0065, 1, 'cosmo2']

# Nuisance parameters:

# amplitude for IA:
data.parameters['A_IA_1'] = [0.0, -6.0, 6.0, 1.0, 1, 'nuisance']
data.parameters['A_IA_2'] = [0.0, -6.0, 6.0, 1.0, 1, 'nuisance']

# parameters for baryon feedback with 'hmcode':
data.parameters['c_min_1'] = [3., 2., 3.13, 1., 1, 'cosmo1']
data.parameters['c_min_2'] = [3., 2., 3.13, 1., 1, 'cosmo2']
#data.parameters['eta_0_1'] = [0.7, 0.59, 0.81, 1., 1, 'cosmo1']
#data.parameters['eta_0_2'] = [0.7, 0.59, 0.81, 1., 1, 'cosmo2']

# amplitude for baryon feedback with 'halofit':
#data.parameters['A_bary_1'] = [0.75, 0.5, 1., 0.5, 1, 'nuisance']
#data.parameters['A_bary_2'] = [0.75, 0.5, 1., 0.5, 1, 'nuisance']

# Derived parameters

data.parameters['Omega_m_1']      = [1, None, None, 0, 1, 'derived']  
data.parameters['sigma8_1']       = [1, None, None, 0, 1, 'derived']  
data.parameters['Omega_m_2']      = [1, None, None, 0, 1, 'derived']  
data.parameters['sigma8_2']       = [1, None, None, 0, 1, 'derived']  

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

# fix main cosmology to Planck:
data.cosmo1_arguments['Omega_k'] = 0.
data.cosmo2_arguments['Omega_k'] = 0.

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046
#data.cosmo_arguments['N_eff'] = 3.046
data.cosmo1_arguments['N_eff'] = 2.0328
data.cosmo1_arguments['N_ncdm'] = 1
data.cosmo1_arguments['m_ncdm'] = 0.06
data.cosmo1_arguments['T_ncdm'] = 0.71611
data.cosmo2_arguments['N_eff'] = 2.0328
data.cosmo2_arguments['N_ncdm'] = 1
data.cosmo2_arguments['m_ncdm'] = 0.06
data.cosmo2_arguments['T_ncdm'] = 0.71611

# standard BBN prediction of the primordial Helium abundance $Y_p$:
data.cosmo1_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo1_arguments['k_pivot'] = 0.05
data.cosmo2_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo2_arguments['k_pivot'] = 0.05

# only needed for regular MCMC:
data.write_step = 1
