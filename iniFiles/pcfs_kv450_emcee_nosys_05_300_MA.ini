[runtime]
; The test sampler just runs a single parameter set
sampler = emcee

; The output section describes where to save the results of the sampling. Not all samplers use this facility - for example, the test and maxlike samplers produce only a single value and so do not need an output file. 
[output]
filename = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/cosebis/KV450/pcfs_emcee_KV450_nosys_blindMA.txt
format = text
verbosity= highest
; verbosity	Choose from "silent", "quiet", "gentle", "standard", "noisy", "debug", and "highest" to get different amounts of output. Not all the printing code uses this mechanism so we need to improve it.

; The total number of samples taken is walkers*samples.
; Running a sampler in parallel
; To run a sampler in parallel you must have mpi4py installed
; this means you must also have an MPI environment including mpicc and mpif90 (the automatic installation includes all these).
; For all the samplers, you can run in parallel on, e.g. four samplers, like this:
; mpirun -n 4 cosmosis --mpi params.ini
; Maximum process numbers
; For emcee, the most MPI processes you can use without having some idle is nwalkers/2+1.

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
;The total number of samples taken is walkers*samples.
walkers = 48
samples = 1500
; This is the interval at which convergence diagnostics
; are performed
nsteps = 200
;start_points=cosmosis-standard-library/cosebis/values.ini


[test]
save_dir=pcfs_kids_test
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
; The list of modules to be run, in this order.
; The modules named here must appear as sections below
;consistency camb sigma8_rescale halofit extrapolate load_nz photoz_bias  nonlinear_linear_alignment  shear_shear add_intrinsic shear_m_bias 2pt 2pt_like
modules = consistency camb sigma8_rescale halofit_takahashi extrapolate_power load_nz shear_shear pcfs_like
; modules = consistency camb sigma8_rescale halofit_takahashi extrapolate_power load_nz nonlinear_linear_alignment shear_shear add_intrinsic cosebis
;modules = consistency camb sigma8_rescale halofit extrapolate_power load_nz shear_shear cosebis
; 1) consistency: calculate the simply derived cosmological parameters (e.g. omega_c = omega_m-omega_b)
; 2) camb: run the Boltzmann code to get the matter power spectrum
; 3) sigma8_rescale: rescale the camb outputs so we can sample in sigma_8 instead
; 4) halofit: get the nonlinear matter power spectrum 
; 5) extrapolate: extend the power spectra to high k
; 6) load_nz: get the photometric n(z) 
; 7) photoz_bias: apply the bias parameters for the photo-z to estimate the underlying model n(z) 
; 8) nonlinear_linear_alignment: use the NLA model to get intrinsic alignment 3D power spectra 
; 9) shear_shear: convert the 3D spectra into 2D tomographic C_ell with the Limber approximation
; 10) add_intrinsic: combine the intrinsic and shear terms together into the total observable C_ell
; 11) shear_m_bias: apply the shear measurement bias to predict the measured C_ell 
; 12) cosebis: finds COSEBIs En from C_ell
;priors = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/cosebis/iniFiles/prior_KV450.ini
values = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/cosebis/iniFiles/values_kv450_nosys.ini
;priors = cosmosis-standard-library/cosebis/prior.ini

likelihoods = pcfs_like
extra_output = 

; We can get a little more output during the run by setting some values
quiet=F
timing=T
debug=T

[consistency]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/utility/consistency/consistency_interface.py


[photoz_bias]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
mode=additive
sample=nz_sample
bias_section = wl_photoz_errors

[camb]
# If these parameters are not those you would like to sample over (say omega_m or
# omegaa_ch2 are preferable), please use the consistency module.
;         omega_b:  "real, baryon density fraction today"
;         omega_c:  "real, cdm density fraction today"
;         omega_k:  "real, curvature density fraction today (default 0.0)"
;         omega_lambda:  "real, dark energy density fraction today"
;         hubble:  "real, hubble parameter H0 (km/s/Mpc)"
;         tau:  "real, optical depth to last-scattering (ignored in background mode)"
;         n_s:  "real, scalar spectral index (ignored in background/thermal mode)"
;         A_s:  "real, scalar spectrum primordial amplitude (ignored in background/thermal mode)"
;         k_s:  "real, Power spectrum pivot scale (default 0.05/Mpc)"
;         #There rest of these are always optional, CAMB will set defaults as appropriate
;         r_t:  "real, tensor to scalar ratio (default 0.0)"
;         n_run:  "real, running of scalar spectrum d n_s / d log_k (default 0.0)"
;         n_t:  "real, tensor spectral index (default 0.0)"
;         omega_nu:  "real, neutrino density fraction today (default 0.0)"
;         massless_nu:  "real, effective number of massless neutrinos (default 3.046)"
;         massive_nu:  "integer, number of massive neutrinos (default 0)"
;         sterile_neutrino:  "integer, number of sterile neutrinos (default 0)"
;         delta_neff:  "real, contribution to N_eff by sterile neutrino (default 0)"
;         sterile_mass_fraction:  "real, fraction of omega_nu in sterile neutrino"
;         yhe:  "real, helium fraction (default 0.24)"
;         w:  "real, w(z=0) equation of state of dark energy (default -1.0). ignored if use_tabulated_w=T"
;         wa:  "real, equation of state parameter w(z) = w_0 + w_a z / (1+z)  (default 0.0). ignored if use_tabulated_w=T"
;         cs2_de:  "real, dark energy sound speed/c (default 1.0)"
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=1000
feedback=0

[sigma8_rescale]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

[halofit]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/halofit/halofit_module.so


[halofit_takahashi]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

[extrapolate_power]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0


[load_nz]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
;file= cosmosis-standard-library/number_density/load_nz/load_nz.py  ;;doesn't seem to work with this W_sampler error, doesn't find nz_sample
nz_file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/cosebis/KV450/nofZ_blindA.fits
data_sets=SAMPLE

[growth]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/structure/growth_factor/interface.so
zmin=0.
zmax=6.
nz=701


[nonlinear_linear_alignment]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected
;method: "string, choice of 'bk', 'bk_corrected', 'krhb', chooses which model to run"
;  A number of variations to the LA model have been discussed since, and this module
; implements three of them.  The history is a little convoluted as an error was found
; in early work missing a factor of (1+z), so one of our models is a corrected version
; of one of the other ones.  Our models are:
;         Bridle & King
;         Bridle & King (corrected)
;         Kirk, Rassat, Host, Bridle


[shear_m_bias]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/shear_bias/shear_m_bias.py
m_per_bin = True



[shear_shear]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 1000000.0
n_ell = 200
shear-shear = sample-sample 
;intrinsic-intrinsic = sample-sample
;shear-intrinsic =sample-sample
verbose = T


[add_intrinsic]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py
position-shear=F

; Can be used to add redshift-dependence to the IAs
[ia_z_field]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/intrinsic_alignments/z_powerlaw/ia_z_powerlaw.py


[pcfs_like]
;this one finds the likelihood
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/cosebis/lib2pcfs_likelihood.so
theta_min_plus = 0.5
theta_min_minus =0.8
theta_max_plus = 70.0
theta_max_minus =300.0
input_2pcfs_filename=cosmosis-standard-library/cosebis/KV450/PCFSResults/
input_covariance_filename = cosmosis-standard-library/cosebis/KV450/Covariance/
