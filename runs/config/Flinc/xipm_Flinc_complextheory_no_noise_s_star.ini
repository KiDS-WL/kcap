[DEFAULT]
CSL_PATH = .
KCAP_PATH = .
COSEBIS_PATH = ..
VALUES_NAME = Flinc
SAMPLER_NAME = multinest

CONFIG_FOLDER  = %(KCAP_PATH)s/runs/config/Flinc/
INPUT_FOLDER  = %(KCAP_PATH)s/data/KiDS1000/Flinc/
OUTPUT_FOLDER = %(KCAP_PATH)s/runs/output/Flinc/

NZ_FILE_NAME = nofz.fits
redshift_name = flinc
nBins_in = 5
;PCFs_INPUT_NAME = xipm_binned_data.ascii
;PCFs_INPUT_NAME = xipm_binned_theory_cut.ascii
PCFs_INPUT_NAME = xipm_binned_theory_cut_new.ascii
;COV_PCFs_INPUT_NAME = cov_theory2_GG_obs_cut.ascii
;COV_PCFs_INPUT_NAME = cov_simpleMask_GG_obs_cut.ascii
;COV_PCFs_INPUT_NAME = cov_complexMask_GG_obs_cut.ascii
COV_PCFs_INPUT_NAME = cov_complexTheory_GG_obs_cut.ascii

RUN_NAME = %(PCFs_INPUT_NAME)s_%(COV_PCFs_INPUT_NAME)s_s_star

[runtime]
sampler = %(SAMPLER_NAME)s

[metropolis]
samples = 10000
nsteps = 1

[multinest]

max_iterations=100000
multinest_outfile_root= %(OUTPUT_FOLDER)s/multinest/multinest_%(RUN_NAME)s_
resume=F
tolerance = 0.1
constant_efficiency = F
live_points = 500
efficiency = 0.3

;live_points=1000
;efficiency=0.1
;tolerance=0.3
;constant_efficiency=F
;ins=F


; max_iterations=50000
; multinest_outfile_root= %(OUTPUT_FOLDER)s/multinest_%(RUN_NAME)s_
; live_points=1000
; efficiency=0.1
; tolerance=0.3
; constant_efficiency=F
; ins=F

; max_iterations=50000
; ;max_iterations= 10000
; multinest_outfile_root= %(OUTPUT_FOLDER)s/multinest_%(RUN_NAME)s_
; resume=F
; ; from Joe:- For a quick run:
; live_points=250
; efficiency=0.8
; tolerance=0.1
; constant_efficiency=F
;    ~ 140k evaluations
;    ~ 9k independent samples
;    Few enough samples that the plots will be too scrappy to use in publications. 
;    Estimated mean and covmat will still be good to a few percent
;    Evidence will be a bit off compared to other estimates.
;- Suggested standard run:
;live_points=500
;efficiency=0.3
;tolerance=0.1
;constant_efficiency=F
;    ~ 350k evaluations
;    ~ 20k independent samples
;    Plots should be fine with some small smoothing or Schuhman's transformation.
;    Reasonable evidence
;- A mega-run:
; live_points=1000
; efficiency=0.05
; tolerance=0.1   
; constant_efficiency=T
;    ~ 1M evaluations
;    ~ 40k independent samples
;    Switching on constant_efficiency speeds up from ~1M samples to ~600k
;    Should only need one or two of these for comparison.

;KV450 fiducial set up
; live_points=1000
; efficiency=0.1
; tolerance=0.3
; constant_efficiency=F
; ins=F

; ;mega_run:
; live_points = 1000
; efficiency = 0.05
; tolerance = 0.1
; constant_efficiency = T


[test]
save_dir=%(OUTPUT_FOLDER)s/test_output_%(RUN_NAME)s
fatal_errors=T

[output]
filename=%(OUTPUT_FOLDER)s/samples_%(RUN_NAME)s.txt
format=text

[pipeline]

modules = sample_S_star one_parameter_hmcode camb consistency extrapolate_power fits_nz linear_alignment projection add_intrinsic cl2xi pcfs derived_parameters

values = %(CONFIG_FOLDER)s/%(VALUES_NAME)s_s_star_values.ini
;prior = %(CONFIG_FOLDER)s/%(VALUES_NAME)s_priors.ini

likelihoods = pcfs
extra_output = cosmological_parameters/sigma_8 cosmological_parameters/omega_m cosmological_parameters/S8
quiet=F
timing=T
debug=F


[consistency]
file = %(CSL_PATH)s/cosmosis-standard-library/utility/consistency/consistency_interface.py

[sample_ln_As]
file = %(KCAP_PATH)s/utils/sample_ln_As.py


[sample_S_star]
file = %(KCAP_PATH)s/utils/sample_S_star.py
alpha = 0.5
use_ln_A_s = T

[derived_parameters]
file = %(KCAP_PATH)s/utils/derived_parameters.py
parameters = S8

[one_parameter_hmcode]
file = %(KCAP_PATH)s/utils/one_parameter_hmcode.py
a_0 = 0.98
a_1 = -0.12

[camb]
file = %(CSL_PATH)s/cosmosis-standard-library/boltzmann/pycamb/camb_interface.py
mode=transfer
lmax=2650
do_reionization = F
feedback=0
kmax=20.0
zmin=0.0
zmid=2.0
nz_mid=100
zmax=6.0
nz=150
background_zmax=6.0
background_zmin=0.0
background_nz=6000
halofit_verion=mead
;theta_H0_range=10 150

[halofit_smith]
file= %(CSL_PATH)s/cosmosis-standard-library/boltzmann/halofit/halofit_module.so

[halofit_takahashi]
file = %(CSL_PATH)s/cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

[HMx]
file = %(KCAP_PATH)s/HMx/lib/cosmosis_interface.so
nk = 128
kmin = 1e-5
kmax = 1e2
nz = 64
zmin = 0.0
zmax = 5.99
verbose = 0
dimensionless_power_spectrum = 0
p_lin_source = external
hm_mode = hmcode
one_parameter_hmcode = T


[HMCode]
file =  %(CSL_PATH)s/cosmosis-standard-library/structure/meadcb/mead_interface.so
one_baryon_parameter=T
feedback=F


[fits_nz]
file = %(CSL_PATH)s/cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(INPUT_FOLDER)s/nofz/%(NZ_FILE_NAME)s
data_sets = %(redshift_name)s
prefix_section = T
prefix_extension = T


[source_photoz_bias]
file = %(CSL_PATH)s/cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_%(redshift_name)s
bias_section = nofz_shifts
interpolation = linear

[linear_alignment]
file = %(CSL_PATH)s/cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected

[projection]
file = %(CSL_PATH)s/cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5.0e5
n_ell = 200
shear-shear = %(redshift_name)s-%(redshift_name)s 
shear-intrinsic = %(redshift_name)s-%(redshift_name)s 
intrinsic-intrinsic = %(redshift_name)s-%(redshift_name)s 
;position-shear = sample-sample
verbose = T
get_kernel_peaks = F


[shear_m_bias]
file = %(CSL_PATH)s/cosmosis-standard-library/shear/shear_bias/shear_m_bias.py
m_per_bin = True
verbose = F


[add_intrinsic]
file=%(CSL_PATH)s/cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py
position-shear=False


[extrapolate_power]
file=%(CSL_PATH)s/cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

[cl2xi]
file = %(CSL_PATH)s/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0



[pcfs]
file = %(COSEBIS_PATH)s/cosebis/lib2pcfs_likelihood.so
theta_min_plus=0.5
theta_max_plus=72.40262468
nTheta_plus=7
theta_min_minus=4.21716333
theta_max_minus=300.0
nTheta_minus=6
input_2pcfs_filename=%(INPUT_FOLDER)s/data_vector/%(PCFs_INPUT_NAME)s
input_covariance_filename = %(INPUT_FOLDER)s/covariance/%(COV_PCFs_INPUT_NAME)s

[mini_2pt_like]
file = %(KCAP_PATH)s/utils/mini_2pt_like.py
n_bin = %(nBins_in)s
data_filename = %(INPUT_FOLDER)s/data_vector/%(PCFs_INPUT_NAME)s
angular_binning_mode = none
;9 log-spaced bins between 0.5 and 300.0
;angular_bin_edges = 0.5 1.01777898 2.0717481 4.21716333 8.58428037 17.4738002 35.56893304 72.40262468 147.37973879 300.0
order_cov = xi_pm-bin-theta
order_data = xi_pm-bin-theta
cov = %(INPUT_FOLDER)s/covariance/%(COV_PCFs_INPUT_NAME)s
constant_c_offset = F
like_name = 2pt_like

; [pcfs]
; file = %(KCAP_PATH)s/cosebis/lib2pcfs_likelihood.so
; theta_min_plus=0.5
; theta_max_plus=300.0
; nTheta_plus=9
; theta_min_minus=0.5
; theta_max_minus=300.0
; nTheta_minus=9
; input_2pcfs_filename=%(INPUT_FOLDER)s/%(PCFs_INPUT_NAME)s
; input_covariance_filename = %(INPUT_FOLDER)s/%(COV_PCFs_INPUT_NAME)s




; [cosebis]
; file = %(CSL_PATH)s/cosebis/libcosebis_cl.so
; theta_min = %(tmin_cosebis)s
; theta_max = %(tmax_cosebis)s
; n_max = %(nmax_cosebis)s
; nBins = %(nBins_in)s
; ;sigma_m = 0.02
; ;noise_per_tomo_pair = 0.2 0.3 0.4 0.5
; sigma_e = 0.29 0.29 0.29 0.29 0.29 ; mean per component, needs more than one input for some reason!!
; ngal_effective = 0.798901810482  1.32816322736  2.34674156746  1.55018494565  1.44117910418 ;1/arcmin^2, needs more than one input for some reason!!
; Area = 859.4366926962348 ; in deg^2
; Cov_name = %(OUTPUT_FOLDER)s/Covariance_nMaximum_%(nmax_cosebis)s_%(tmin_cosebis)s_%(tmax_cosebis)s_nBins5
; calculateCov = 0
; ;input_nPair_files_suffix = /disk09/ma/Flinc_for_Athena/AthenaResults/xi_LOS0
; ;input_nPair_files_suffix_end = .ascii

; ;input_nPair_files_suffix = %(INPUT_FOLDER)s/AthenaResults/xi ; the files should be called: input_nPair_files_suffix11,input_nPair_files_suffix12,input_nPair_files_suffix13, ...

