[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm
sampler = pmaxlike emcee

[pmaxlike]
maxiter = 1000
tolerance = 0.1


[maxlike]
maxiter = 1000
tolerance = 0.1


[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
walkers = 64
; This many samples is overkill, just to make the plots
; look a lot nicer
samples = 100
; This is the interval at which convergence diagnostics
; are performed
nsteps = 5

[minuit]
verbose=T
tolerance = 50.0
output_ini = demo18_output.ini
save_dir=demo16
strategy = medium
algorithm = migrad
maxiter = 2000
width_estimate = 0.05
;save_cov = demo_16_covmat.txt




[output]
filename = demo18.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb jla riess11
values = demos/values18.ini
extra_output =
likelihoods = jla riess
quiet=T
debug=F
timing=F




[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0

[jla]
; JLA needs quite a lot of parameters telling it where
; data files are ...
file = cosmosis-standard-library/supernovae/jla_v3/jla.so
data_dir = cosmosis-standard-library/supernovae/jla_v3/data
data_file = jla_lcparams.txt
scriptmcut = 10.0
mag_covmat_file = jla_v0_covmatrix.dat
stretch_covmat_file = jla_va_covmatrix.dat
colour_covmat_file = jla_vb_covmatrix.dat
mag_stretch_covmat_file = jla_v0a_covmatrix.dat
mag_colour_covmat_file = jla_v0b_covmatrix.dat
stretch_colour_covmat_file = jla_vab_covmatrix.dat

; The Riess 11 likelihood anchors H0 for us
[riess11]
file = cosmosis-standard-library/likelihood/riess11/riess11.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
