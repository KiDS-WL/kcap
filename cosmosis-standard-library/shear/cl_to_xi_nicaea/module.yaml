#This is a template for module description files
name: cl_to_xi_nicaea
version: "1.0"
purpose: "Compute WL correlation functions xi+, xi- from C_ell"
url: ""
interface: nicaea_interface.so
attribution: [Martin Kilbinger, Nicaea Team]
rules: ""
cite: ["http://arxiv.org/abs/0810.5129"]

assumptions:
    - "Input C_ell sufficiently well-sampled over standard pre-defined range"

explanation: |
    "
    The correlation functions are related to the spectra via Bessel functions:
    xi_{(+/-)}(theta) = \int_0^\infty C_\ell J_{(0,4)}(\ell \theta) \ell d\ell / 2\pi

    In this module that integral is done via a Hankel Transform.

    This module is a part of the Nicaea code, with the interface written by Niall
    Maccrann.  It avoids the ringing problems of the alternative cl_to_xi code but
    generates results only on a fixed range in theta .

    The output theta values will always be from about 2.0e-07 to 1.0e+04 radians, but
    only in part of that regime, from about 1 to a few hundred arcmin, will the results
    be numerically valid.  The input ell must include the corresponding range, and
    will be extrapolated linearlly before that and cubically after it.

    "

# List of parameters that can go in the params.ini file in the section for this module
params:
    corr_type: "Integer, either 0 (to do shear EE C_ell -> xi+(theta) and xi-(theta)), or 1 (to convert galaxy position C_ell to w(theta)) or 2 (to convert the cross galaxy position-shear C_ell to gamma_t(theta))"
    input_section_name: "String, name of the angular power spectrum input section. See shear/spectra module. (Default: 'shear_cl', 'galaxy_cl', or 'galaxy_shear_cl' depending on corr_type)"
    output_section_name: "String, name of the angular correlation function output section (Default: 'shear_xi', 'galaxy_shear_xi', or 'galaxy_xi' depending on corr_type)"

inputs:
    input_section_name:
        ell: "Real 1d array, sample ell values for input C_ell"
        nbin_a: "Integer, mainly for mode=2 (GGL) - the number of redshift bins in the first quantity (position bins for GGL)"
        nbin_b: "Integer, mainly for mode=2 (GGL) - the number of redshift bins in the first quantity (shear bins for GGL)"
        nbin: "Integer, Number of redshift bins used if nbin_a or b not found."
        bin_i_j: "Real 1d arrays C_ell (no l(l+1) factor) for bin i and j. Only need j<=i for modes 0 and 1."

outputs:
    output_section_name:
        theta: "Real 1D array, Sample theta values for output xi(theta)"
        xiplus_i_j: "Real 1D arrays, xi_plus(theta) bin i and j, only if mode=0 Only stores j<=i."
        ximinus_i_j: "Real 1D arrays, xi_minus(theta) bin i and j, only if mode=0. Only stores j<=i."
        bin_i_j: "Real 1D array, w(theta) or gamma_t(theta) for bin i and j, only if mode=1 or 2 respectively. Only stores j<=i."
        nbin_a: "Integer, number of i tomographic bins"
        nbin_b: "Integer, number of j tomographic bins"

