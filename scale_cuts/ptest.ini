[DEFAULT]
CSL_PATH = ../kcap/cosmosis-standard-library/
KCAP_PATH = ../kcap/
COSEBIS_PATH = ../cosebis_cosmosis/
SCALE_CUT_PATH = .
VALUES_NAME = ptest
SAMPLER_NAME = test
RUN_NAME = %(VALUES_NAME)s_%(SAMPLER_NAME)s

OUTPUT_FOLDER = %(SCALE_CUT_PATH)s/output

[runtime]
sampler = %(SAMPLER_NAME)s

[test]
save_dir=%(OUTPUT_FOLDER)s/output_%(RUN_NAME)s
fatal_errors=T

[output]
filename=%(OUTPUT_FOLDER)s/output_%(RUN_NAME)s.txt
format=text

[pipeline]
; modules = load_cterm
modules = consistency sample_ln_As camb halofit_takahashi extrapolate_power load_nz projection cl2xi load_cterm xip xim scale_cuts 

values = %(SCALE_CUT_PATH)s/%(VALUES_NAME)s_values.ini
likelihoods = 
quiet=F
timing=T
debug=F

[consistency]
file = %(CSL_PATH)s/utility/consistency/consistency_interface.py

[sample_ln_As]
file = %(KCAP_PATH)s/utils/sample_ln_As.py

[camb]
file = %(CSL_PATH)s/boltzmann/camb/camb.so
mode=all
lmax=2500
;accuracy_boost = 2.0
;high_accuracy_default = T
feedback=0
kmin=1e-5
kmax=10.0
nk=200
zmax=6.0
background_zmax=6.0

[halofit_takahashi]
file = %(CSL_PATH)s/boltzmann/halofit_takahashi/halofit_interface.so

[extrapolate_power]
file=%(CSL_PATH)s/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

[sigma8_rescale]
file = %(CSL_PATH)s/utility/sample_sigma8/sigma8_rescale.py

[load_nz]
file = %(CSL_PATH)s/number_density/load_nz/load_nz.py
filepath = %(KCAP_PATH)s/examples/kv450_data/nofz/KiDS_2018-07-26_deepspecz_photoz_10th_BLIND_specweight_1000_4_ZB01t03_blindA_Nz.asc %(KCAP_PATH)s/examples/kv450_data/nofz/KiDS_2018-07-26_deepspecz_photoz_10th_BLIND_specweight_1000_4_ZB03t05_blindA_Nz.asc %(KCAP_PATH)s/examples/kv450_data/nofz/KiDS_2018-07-26_deepspecz_photoz_10th_BLIND_specweight_1000_4_ZB05t07_blindA_Nz.asc %(KCAP_PATH)s/examples/kv450_data/nofz/KiDS_2018-07-26_deepspecz_photoz_10th_BLIND_specweight_1000_4_ZB07t09_blindA_Nz.asc %(KCAP_PATH)s/examples/kv450_data/nofz/KiDS_2018-07-26_deepspecz_photoz_10th_BLIND_specweight_1000_4_ZB09t12_blindA_Nz.asc
histogram = True
output_section = nz_KV450_5bin

[projection]
file = %(CSL_PATH)s/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5.0e5
n_ell = 400
shear-shear = KV450_5bin-KV450_5bin
;shear-intrinsic = sample-sample
;intrinsic-intrinsic = sample-sample
;position-shear = sample-sample
verbose = T
get_kernel_peaks = F

[cl2xi]
file = %(CSL_PATH)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0

[load_cterm]
file = %(SCALE_CUT_PATH)s/load_cterm.py
cterm_filename = %(SCALE_CUT_PATH)s/test_files/twoPoint_fakeCTerm.fits
cterm_extention_names = 2d_cterm cterm_cos cterm_sin
;; There will be 3 output_section_name,
;; set to be the same as 3 strings in cterm_extention_names
; output_folder_names = 2d_cterm cterm_cos cterm_sin

[xip]
file = %(COSEBIS_PATH)s/libxipm_binned.so
output_section_name= xi_binned_plus ; (optional) the DEFAULT is xi_binned
input_section_name= shear_xi_plus ; (optional) the DEFAULT depends on type
type=plus ; please specify this otherwise as plus or minus DEFAULT is plus

;;if you want weighted binning you need to at least give the bin edges in a file
; if these files are given then we will ignore the theta values above
theta_min_max_filename = %(COSEBIS_PATH)s/example_files/xi/inputs/theta_bin_edges_file.ascii ; (optional) these are the edges of the theta plus bins,

; will look for theta_min, theta_max and nTheta then do log binning between min and max.
; if the file exists we will ignore theta_min,theta_max and nTheta
; theta_file_name = theta_file.ascii ; (optional) a list of theta values, one for each theta bin
theta_min=0.5
theta_max=300.0
nTheta=9

; only read if the theta_min_max_filename is given
; if InputNpair not given weighted binning is set to theta*delta_theta
; The files should be name like so: ${InputNpair}_nBins_${nBins}_Bin${i}_Bin${j}${InputNpair_suffix}
; input_nPair_files_suffix = /disk09/ma/KV450_v2_All/AthenaResults/xi ; (optional) a file containing the number of npair per finely binned thetas.
; ; InputNpair_suffix = .ascii ; (optional) DEFAULT is empty
; Column_theta = 0 ; (optional) which column in the file is theta? DEFAULT is 0
; Column_Npair = 7 ; which column in the file is npair? DEFAULT is 7
; nBins_in = 5 ; number of redshift bins, this needs to be given, otherwise will set weighted binning to just theta

; Here we assume that the ordering of the data vector is:
; ///The data vector format should be:
; // \xi_+^{11}(\theta_1)
; // \xi_+^{11}(\theta_2)
; // ...
; // \xi_+^{11}(\theta_max)
; // \xi_+^{nn}(\theta_1)
; // ...
; // \xi_+^{nn}(\theta_max)
; // \xi_-^{11}(\theta_1)
; // \xi_-^{11}(\theta_2)
; // ...
; // \xi_-^{11}(\theta_max)
; // ...
; // \xi_-^{nn}(\theta_1)
; // ...
; // \xi_-^{nn}(\theta_max)

add_2D_cterm = 0 ; (optional) DEFAULT is 0: don't add it
; InputXipm_2D_cterm = xip_2D_cterm.ascii; (optional) if not given and add_2D_cterm>0 then look in the block
input_2D_section_name = xi_2D ; (optional) where to look in the block for xi_2D, it has to be the same format as other cosmosis outputs
; the full value of this depends on type: input_2D_section_name+= "_"+type

add_c_term = 0 ; (optional) DEFAULT is 0: don't add it
;InputCos4phi = InputCos4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
;InputSin4phi = InputSin4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
; section names for sin and cos 4 phi in the block. The data has to be the same format as all other cosmosis outputs
input_sin4phi_section_name = xim_sin4phi ; (optional) only relevant for xim DEFAULT value is xim_sin4phi, will look in tis section for the xim_sin4phi values
input_cos4phi_section_name = xim_cos4phi ; (optional) only relevant for xim DEFAULT value is xim_cos4phi, will look in tis section for the xim_cos4phi values

[xim]
file = %(COSEBIS_PATH)s/libxipm_binned.so
output_section_name= xi_binned_minus ; (optional) the DEFAULT is xi_binned
type=minus ; please specify this otherwise as plus or minus DEFAULT is plus
input_section_name= shear_xi_minus ; (optional) the DEFAULT depends on type

;;if you want weighted binning you need to at least give the bin edges in a file
; if these files are given then we will ignore the theta values above
theta_min_max_filename = %(COSEBIS_PATH)s/example_files/xi/inputs/theta_bin_edges_file.ascii ; (optional) these are the edges of the theta plus bins,

; will look for theta_min, theta_max and nTheta then do log binning between min and max.
; if the file exists we will ignore theta_min,theta_max and nTheta
;theta_file_name = theta_file.ascii ; (optional) a list of theta values, one for each theta bin
theta_min=0.5
theta_max=300.0
nTheta=9

; only read if the theta_min_max_filename is given
; if InputNpair not given weighted binning is set to theta*delta_theta
; The files should be name like so: ${InputNpair}_nBins_${nBins}_Bin${i}_Bin${j}${InputNpair_suffix}
;input_nPair_files_suffix = /disk09/ma/KV450_v2_All/AthenaResults/xi ; (optional) a file containing the number of npair per finely binned thetas.
;InputNpair_suffix = .ascii ; (optional) DEFAULT is empty
;Column_theta = 0 ; (optional) which column in the file is theta? DEFAULT is 0
;Column_Npair = 7 ; which column in the file is npair? DEFAULT is 7
;nBins_in = 5 ; number of redshift bins, this needs to be given, otherwise will set weighted binning to just theta

; Here we assume that the ordering of the data vector is:
; ///The data vector format should be:
; // \xi_+^{11}(\theta_1)
; // \xi_+^{11}(\theta_2)
; // ...
; // \xi_+^{11}(\theta_max)
; // \xi_+^{nn}(\theta_1)
; // ...
; // \xi_+^{nn}(\theta_max)
; // \xi_-^{11}(\theta_1)
; // \xi_-^{11}(\theta_2)
; // ...
; // \xi_-^{11}(\theta_max)
; // ...
; // \xi_-^{nn}(\theta_1)
; // ...
; // \xi_-^{nn}(\theta_max)

add_2D_cterm = 0 ; (optional) DEFAULT is 0: don't add it
;InputXipm_2D_cterm = xim_2D_cterm.ascii; (optional) if not given and add_2D_cterm>0 then look in the block
input_2D_section_name = xi_2D ; (optional) where to look in the block for xi_2D, it has to be the same format as other cosmosis outputs
; the full value of this depends on type: input_2D_section_name+= "_"+type

add_c_term = 0 ; (optional) DEFAULT is 0: don't add it
;InputCos4phi = InputCos4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
;InputSin4phi = InputSin4phi.ascii ; (optional) for xi_minus these are needed, either read from file or block
; section names for sin and cos 4 phi in the block. The data has to be the same format as all other cosmosis outputs
input_sin4phi_section_name = xim_sin4phi ; (optional) only relevant for xim DEFAULT value is xim_sin4phi, will look in tis section for the xim_sin4phi values
input_cos4phi_section_name = xim_cos4phi ; (optional) only relevant for xim DEFAULT value is xim_cos4phi, will look in tis section for the xim_cos4phi values

[scale_cuts]
file = %(SCALE_CUT_PATH)s/scale_cuts.py
output_section_name = theory_data_covariance
data_and_covariance_fits_filename = %(SCALE_CUT_PATH)s/test_files/twoPoint_KV450.fits

;; Define the statistics to use & the scale cuts in the following two lines:
scale_cuts_filename = %(SCALE_CUT_PATH)s/scale_cuts.ini
scale_cuts_option = KV450_like

;; Section names for data
xi_plus_extension_name = xiP
xi_minus_extension_name = xiM
bandpower_ggl_extension_name = PneE
bandpower_e_cosmic_shear_extension_name = PeeE
cosebis_extension_name = En

;; Section names for theory
xi_plus_section_name = xi_binned_plus
xi_minus_section_name = xi_binned_minus
bandpower_ggl_section_name = bandpower_ggl
bandpower_e_cosmic_shear_section_name = bandpower_e_cosmic_shear
cosebis_section_name = cosebis

